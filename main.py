import json
import os
import random
import threading
import base64
import requests
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    CommandHandler,
    filters,
)
from PIL import Image

TOKEN = "8320309750:AAHoAET0wBIIwMx49pr6k-2ArGK2mnwxQeA"

friends_file = "friends.json"
known_users_file = "known_users.json"

# --- –õ–æ–∫–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ–∫–∏ ---
friends_lock = threading.Lock()
users_lock = threading.Lock()

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è GitHub ---
def save_file_to_github(file_path):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π JSON —Ñ–∞–π–ª —É GitHub
    """
    token = os.getenv("GITHUB_TOKEN", "").strip()
    repo = os.getenv("GITHUB_REPO", "Polilen/tgbot").strip()

    if not token:
        return

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()

        url = f"https://api.github.com/repos/{repo}/contents/{file_path}"
        headers = {"Authorization": f"Bearer {token}"}

        # –û—Ç—Ä–∏–º—É—î–º–æ SHA –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        r = requests.get(url, headers=headers)
        sha = r.json().get("sha") if r.status_code == 200 else None

        # –ö–æ–¥—É—î–º–æ —Ñ–∞–π–ª —É Base64
        encoded_content = base64.b64encode(content.encode("utf-8")).decode("utf-8")

        data = {
            "message": f"update {file_path}",
            "content": encoded_content,
            "sha": sha
        }

        response = requests.put(url, headers=headers, json=data)
        if response.status_code in (200, 201):
            print(f"‚úÖ {file_path} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ —É GitHub")
        else:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ {file_path} —É GitHub: {response.text}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ {file_path} –≤ GitHub: {e}")

def load_file_from_github(file_path):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π JSON —Ñ–∞–π–ª –∑ GitHub
    """
    token = os.getenv("GITHUB_TOKEN", "").strip()
    repo = os.getenv("GITHUB_REPO", "Polilen/tgbot").strip()
    
    if not token:
        return None
    
    url = f"https://api.github.com/repos/{repo}/contents/{file_path}"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            content = response.json()
            decoded = base64.b64decode(content["content"]).decode("utf-8")
            print(f"‚úÖ {file_path} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ GitHub")
            return json.loads(decoded)
        else:
            return None
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ {file_path} –∑ GitHub: {e}")
        return None

# --- –°–∏—Å—Ç–µ–º–∞ —Ä—ñ–≤–Ω—ñ–≤ ---
LEVELS = [
    (0, "–ó–Ω–∞–π–æ–º—ñ"),
    (10, "–•–æ—Ä–æ—à—ñ –¥—Ä—É–∑—ñ"),
    (25, "–ë–ª–∏–∑—å–∫—ñ –¥—Ä—É–∑—ñ"),
    (45, "–í—ñ—Ä–Ω—ñ –¥—Ä—É–∑—ñ"),
    (70, "–°–ø—Ä–∞–≤–∂–Ω—ñ –¥—Ä—É–∑—ñ"),
    (100, "–ö—Ä–∞—â—ñ –¥—Ä—É–∑—ñ"),
    (140, "–î—Ä—É–∑—ñ –Ω–∞–∑–∞–≤–∂–¥–∏"),
    (185, "–ù–µ—Ä–æ–∑–ª—É—á–Ω—ñ"),
    (235, "–î—Ä—É–∂–Ω–∞ —Å—ñ–º'—è"),
    (300, "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ñ –¥—Ä—É–∑—ñ")
]

def get_level_and_name(xp):
    level = 0
    next_xp = 0
    name = "–ó–Ω–∞–π–æ–º—ñ"
    for i, (xp_threshold, lvl_name) in enumerate(LEVELS):
        if xp >= xp_threshold:
            level = i + 1
            name = lvl_name
            next_xp = LEVELS[i + 1][0] - xp if i + 1 < len(LEVELS) else 0
        else:
            break
    return level, next_xp, name

# --- –ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON ---
def safe_load_json(path, default=None):
    if default is None:
        default = {}
    
    # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ GitHub
    github_data = load_file_from_github(path)
    if github_data is not None:
        return github_data
    
    # –Ø–∫—â–æ GitHub –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–∞—Ü—é—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º —Ñ–∞–π–ª–æ–º
    if not os.path.exists(path) or os.path.getsize(path) == 0:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(default, f, ensure_ascii=False, indent=2)
        return default
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(default, f, ensure_ascii=False, indent=2)
        return default

friends = safe_load_json(friends_file)
known_users = safe_load_json(known_users_file)

def save_friends():
    with friends_lock:
        with open(friends_file, "w", encoding="utf-8") as f:
            json.dump(friends, f, ensure_ascii=False, indent=2)
        save_file_to_github(friends_file)

def save_known_users():
    with users_lock:
        with open(known_users_file, "w", encoding="utf-8") as f:
            json.dump(known_users, f, ensure_ascii=False, indent=2)
        save_file_to_github(known_users_file)

KIEV_TZ = timezone(timedelta(hours=3))

def parse_datetime(dt_str):
    try:
        return datetime.fromisoformat(dt_str).astimezone(KIEV_TZ)
    except:
        return None

def format_duration(delta):
    days = delta.days
    hours = delta.seconds // 3600
    minutes = (delta.seconds % 3600) // 60
    parts = []
    if days > 0:
        parts.append(f"{days} –¥–Ω.")
    if hours > 0:
        parts.append(f"{hours} –≥–æ–¥.")
    if minutes > 0:
        parts.append(f"{minutes} —Ö–≤.")
    return ", ".join(parts) if parts else "–º–µ–Ω—à–µ —Ö–≤–∏–ª–∏–Ω–∏"

def find_user(username_fragment):
    username_fragment = username_fragment.lower()
    if username_fragment in known_users:
        return username_fragment
    for uname in known_users.keys():
        if uname.startswith(username_fragment):
            return uname
    return None

async def check_level_up(username, friend_username, old_xp, new_xp, context, chat_id):
    old_level, _, old_level_name = get_level_and_name(old_xp)
    new_level, _, new_level_name = get_level_and_name(new_xp)

    if new_level > old_level:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚¨ÜÔ∏è –†—ñ–≤–µ–Ω—å –¥—Ä—É–∂–±–∏ –º—ñ–∂ @{username} —ñ @{friend_username} –ø—ñ–¥–≤–∏—â–µ–Ω–æ! "
                 f"–¢–µ–ø–µ—Ä —Ä—ñ–≤–µ–Ω—å {new_level} ‚Äî ¬´{new_level_name}¬ª"
        )


async def add_friend(proposer, target_username, context=None, chat_id=None):
    now_iso = datetime.now(KIEV_TZ).isoformat()
    friends.setdefault(proposer, {})[target_username] = {"since": now_iso, "xp": 0}
    friends.setdefault(target_username, {})[proposer] = {"since": now_iso, "xp": 0}
    save_friends()
    if context and chat_id:
        await context.bot.send_message(chat_id=chat_id, text=f"ü´∂ @{proposer} —ñ @{target_username} —Ç–µ–ø–µ—Ä –¥—Ä—É–∑—ñ!")

# --- –ù–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è hug / –±ream ---
class ActionHandler:
    def __init__(self, friends_data, users_data):
        self.friends = friends_data
        self.users = users_data

    async def perform_action(self, update, context, action_type="hug"):
        user = update.effective_user
        sender_username = user.username.lower() if user.username else None
        if not sender_username:
            await update.message.reply_text("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î username.")
            return

        target_username = None
        text_lower = update.message.text.strip().lower()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Å–ª–æ–≤–æ "–≤—Å—ñ—Ö" (–¥–ª—è hug) –∞–±–æ "–≤—Å—ñ–º" (–¥–ª—è bream)
        if "–≤—Å—ñ—Ö" in text_lower or ("–≤—Å—ñ–º" in text_lower and action_type == "bream"):
            # –û–±—ñ–π–º–∞—î–º–æ/–¥–∞—î–º–æ –ª—è—â–∞ –í–°–Ü–ú –¥—Ä—É–∑—è–º
            if sender_username in self.friends and self.friends[sender_username]:
                targets = list(self.friends[sender_username].keys())
            else:
                await update.message.reply_text("–í —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –¥—Ä—É–∑—ñ–≤ üòÖ")
                return
        else:
            # –®—É–∫–∞—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ª—é–¥–∏–Ω—É —á–µ—Ä–µ–∑ reply –∞–±–æ @username
            
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ reply
            if update.message.reply_to_message:
                target_user = update.message.reply_to_message.from_user
                target_username = target_user.username.lower() if target_user.username else None
                
                if not target_username:
                    await update.message.reply_text("–£ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î username üòÖ")
                    return
                
                if target_username not in self.friends.get(sender_username, {}):
                    action_text = "–æ–±—ñ–π–Ω—è—Ç–∏" if action_type == "hug" else "–¥–∞—Ç–∏ –π–æ–º—É –ª—è—â–∞"
                    await update.message.reply_text(f"@{target_username} –Ω–µ —î —Ç–≤–æ—ó–º –¥—Ä—É–≥–æ–º üòÖ –¢–∏ –Ω–µ –º–æ–∂–µ—à –π–æ–≥–æ {action_text}.")
                    return
            
            # 2. –Ø–∫—â–æ –Ω–µ–º–∞—î reply ‚Äî —à—É–∫–∞—î–º–æ @username
            if not target_username:
                words = update.message.text.strip().split()
                username_candidates = [w.lstrip("@").lower() for w in words if w.startswith("@")]
                
                if username_candidates:
                    candidate = username_candidates[0]
                    found_user = None
                    
                    if candidate in self.friends.get(sender_username, {}):
                        found_user = candidate
                    else:
                        for friend in self.friends.get(sender_username, {}):
                            if friend.startswith(candidate):
                                found_user = friend
                                break
                    
                    if found_user:
                        target_username = found_user
                    else:
                        await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{candidate}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–µ–¥ —Ç–≤–æ—ó—Ö –¥—Ä—É–∑—ñ–≤ üòÖ")
                        return
            
            # 3. –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî –ø–æ–º–∏–ª–∫–∞
            if not target_username:
                if action_type == "hug":
                    action_text = "–æ–±—ñ–π–Ω—è—Ç–∏"
                    suffix = "–≤—Å—ñ—Ö' —â–æ–± –æ–±—ñ–π–Ω—è—Ç–∏ –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤"
                else:
                    action_text = "–¥–∞—Ç–∏ –ª—è—â–∞"
                    suffix = "–≤—Å—ñ–º' —â–æ–± –¥–∞—Ç–∏ –ª—è—â–∞ –≤—Å—ñ–º –¥—Ä—É–∑—è–º"
                
                await update.message.reply_text(
                    f"–í–∫–∞–∂–∏ –∫–æ–≥–æ —Ö–æ—á–µ—à {action_text}:\n"
                    f"‚Ä¢ –ß–µ—Ä–µ–∑ @username\n"
                    f"‚Ä¢ –ê–±–æ –Ω–∞–ø–∏—à–∏ '{suffix}"
                )
                return
            
            targets = [target_username]

        sender_data = self.users.get(sender_username, {})
        sender_name = sender_data.get("name") or user.first_name or f"@{user.username}"
        sender_gender = sender_data.get("gender")

        for friend_username in targets:
            friend_data = self.users.get(friend_username, {})
            friend_name = friend_data.get("name") or f"@{friend_username}"
            friend_gender = friend_data.get("gender")

            if action_type == "hug":
                if sender_username in self.friends and friend_username in self.friends[sender_username]:
                    old_xp = self.friends[sender_username][friend_username].get("xp", 0)
                    self.friends[sender_username][friend_username]["xp"] += 2
                    self.friends[friend_username][sender_username]["xp"] += 2
                    save_friends()
                    new_xp = self.friends[sender_username][friend_username]["xp"]
                    await check_level_up(sender_username, friend_username, old_xp, new_xp, context, update.effective_chat.id)

            folder = self.choose_folder(sender_gender, friend_gender, action_type)
            images = [f for f in os.listdir(folder) if f.lower().endswith((".png", ".jpg", ".jpeg", ".gif"))]
            if not images:
                continue
            image_path = os.path.join(folder, random.choice(images))
            action_text = "–æ–±—ñ–π–Ω—è–≤(–ª–∞)" if action_type=="hug" else "–¥–∞–≤(–ª–∞) –ª—è—â–∞"
            text = f"[{friend_name}](tg://user?id={friend_data.get('id')})\n" \
                f"ü§ó ‚Ä¢ [{sender_name}](tg://user?id={sender_data.get('id')}) {action_text} {friend_name} ü´∂"

            with open(image_path, "rb") as photo:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=photo,
                    caption=text,
                    parse_mode="Markdown",
                    reply_to_message_id=update.message.message_id
                )
    
    async def remove_friend(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        sender_username = user.username.lower() if user.username else None
        if not sender_username:
            await update.message.reply_text("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î username.")
            return

        text_parts = update.message.text.strip().split(maxsplit=2)
        if len(text_parts) < 2:
            await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å, –∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –¥—Ä—É–∑—ñ–≤ üòÖ")
            return
        raw_target = text_parts[-1].lstrip("@").lower()
        target_username = find_user(raw_target)

        if not target_username:
            await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{raw_target}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        if target_username not in self.friends.get(sender_username, {}):
            await update.message.reply_text(f"@{target_username} –Ω–µ —î –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º üòÖ")
            return

        keyboard = [
            [
                InlineKeyboardButton(
                    "–¢–∞–∫, –ø–µ—Ä–µ—Å—Ç–∞—Ç–∏ –¥—Ä—É–∂–∏—Ç–∏ üò¢",
                    callback_data=f"unfriend_yes|{sender_username}|{target_username}"
                ),
                InlineKeyboardButton("–ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏ –¥—Ä—É–∂–±—É üòä", callback_data="unfriend_no")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞—Ç–∏ –¥—Ä—É–∂–∏—Ç–∏ –∑ @{target_username}? üò¢",
            reply_markup=reply_markup
        )

    async def unfriend_callback(self, update, context):
        query = update.callback_query
        await query.answer()
        data = query.data

        if data == "unfriend_no":
            await query.edit_message_text("–î—Ä—É–∂–±–∞ –∑–∞–ª–∏—à–∏–ª–∞—Å—è üòä")
            return

        if data.startswith("unfriend_yes"):
            _, sender_username, target_username = data.split("|")

            # –£–¥–∞–ª—è–µ–º –¥—Ä—É–∂–±—É —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
            friends.get(sender_username, {}).pop(target_username, None)
            friends.get(target_username, {}).pop(sender_username, None)
            save_friends()

            await query.edit_message_text(f"–í–∏ –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –¥—Ä—É–∂–∏—Ç–∏ –∑ @{target_username} üò¢")

    def choose_folder(self, sender_gender, friend_gender, action_type):
        if action_type == "hug":
            if sender_gender=="male" and friend_gender=="male":
                return "friendsboys"
            elif sender_gender=="female" and friend_gender=="female":
                return "friendsgirls"
            else:
                return "friends"
        elif action_type == "bream":
            if sender_gender=="female" and friend_gender=="male":
                return "breamfromGirltoBoy"
            elif sender_gender=="female" and friend_gender=="female":
                return "breamfromGirltoGirl"
            elif sender_gender=="male" and friend_gender=="female":
                return "breamfromBoytoGirl"
            elif sender_gender=="male" and friend_gender=="male":
                return "breamfromBoytoBoy"


# --- –ö–ª–∞—Å—Å –¥–ª—è —Ç—Ä–∞—Ç –º–æ–Ω–µ—Ç –∏ XP –ø–∞—Ä ---
class SpendCoins:
    def __init__(self, users_data, friends_data):
        self.users = users_data
        self.friends = friends_data  # —Å–ª–æ–≤–∞—Ä—å –¥—Ä—É–∂–±—ã

    async def handle_action(self, text, update, context):
        username = update.effective_user.username.lower() if update.effective_user.username else None
        if not username:
            await update.message.reply_text("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î username.")
            return True

        user_data = self.users.get(username)
        if not user_data:
            return False

        # --- –ü–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –±—ñ–ª—É —à–æ–∫–æ–ª–∞–¥–∫—É –¥—Ä—É–≥—É ---
        if text.startswith("–ø–æ–¥–∞—Ä–∏—Ç–∏ –±—ñ–ª—É —à–æ–∫–æ–ª–∞–¥–∫—É") or text.startswith("–ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –±—ñ–ª—É —à–æ–∫–æ–ª–∞–¥–∫—É"):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            target_username = None
            if update.message.reply_to_message:
                target_user = update.message.reply_to_message.from_user
                target_username = target_user.username.lower() if target_user.username else None
            else:
                parts = update.message.text.strip().split(maxsplit=3)
                if len(parts) == 4:
                    target_username = parts[3].lstrip("@").lower()

            if not target_username:
                await update.message.reply_text("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —à–æ–∫–æ–ª–∞–¥–∫—É.")
                return True

            if target_username not in self.users:
                await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É —Å–∏—Å—Ç–µ–º—ñ.")
                return True

            if username == target_username:
                await update.message.reply_text("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —à–æ–∫–æ–ª–∞–¥–∫—É —Å–∞–º–æ–º—É —Å–æ–±—ñ üòÖ")
                return True

            cost = 5
            if user_data.get("coins", 0) < cost:
                await update.message.reply_text(f"–£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–¥–∞—Ä—É–Ω–∫–∞ ({cost} –º–æ–Ω–µ—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ).")
                return True

            # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
            user_data["coins"] -= cost

            # --- –î–æ–±–∞–≤–ª—è–µ–º 5 XP –ø–∞—Ä–µ –≤ friends.json ---
            xp_gained = 5
            if username in self.friends and target_username in self.friends[username]:
                old_xp = self.friends[username][target_username].get("xp", 0)
                self.friends[username][target_username]["xp"] += xp_gained
                self.friends[target_username][username]["xp"] += xp_gained
                save_friends()
                new_xp = self.friends[username][target_username]["xp"]
                await check_level_up(username, target_username, old_xp, new_xp, context, update.effective_chat.id)
            save_known_users()

            await update.message.reply_text(
                f"üç´ @{username} –ø–æ–¥–∞—Ä—É–≤–∞–≤(–ª–∞) –±—ñ–ª—É —à–æ–∫–æ–ª–∞–¥–∫—É @{target_username}!\n"
                f"‚≠ê XP –¥—Ä—É–∂–±–∏ +{xp_gained}\n"
                f"üí∞ –£ —Ç–µ–±–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å: {user_data['coins']} –º–æ–Ω–µ—Ç."
            )
            return True

        return False


# --- –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã ---
action_handler = ActionHandler(friends, known_users)
spend_coins_handler = SpendCoins(known_users, friends)

# --- –§—É–Ω–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ ---
async def hug(update, context):
    user = update.effective_user
    username = user.username.lower() if user.username else None
    if not username:
        await update.message.reply_text("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î username.")
        return
    # –í—ã–∑—ã–≤–∞–µ–º perform_action –±–µ–∑ target_username, —á—Ç–æ–±—ã –±–æ—Ç —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–ª –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π
    await action_handler.perform_action(update, context, action_type="hug")

async def give_bream(update, context):
    await action_handler.perform_action(update, context, action_type="bream")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username.lower() if user and user.username else None
    text = update.message.text.strip().lower() if update.message else ""
    chat_id = update.effective_chat.id

    if not username:
        await update.message.reply_text("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î username.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = known_users.setdefault(username, {
        "id": user.id,
        "gender": None,
        "name": user.first_name,
        "coins": 0,
        "last_salary": None
    })

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞—Ç –º–æ–Ω–µ—Ç ---
    handled = await spend_coins_handler.handle_action(text, update, context)
    if handled:
        return

    # --- –ü–æ–ª–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
    if text.startswith("—Å—Ç–∞—Ç—å —á–æ–ª–æ–≤—ñ—á–∞"):
        known_users[username]["gender"] = "male"
        save_known_users()
        await update.message.reply_text("–°—Ç–∞—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —è–∫ –ß–æ–ª–æ–≤—ñ—á–∞ ‚ôÇ.")
        return
    elif text.startswith("—Å—Ç–∞—Ç—å –∂—ñ–Ω–æ—á–∞"):
        known_users[username]["gender"] = "female"
        save_known_users()
        await update.message.reply_text("–°—Ç–∞—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —è–∫ –ñ—ñ–Ω–æ—á–∞ ‚ôÄ.")
        return

 # --- –î—Ä—É–∂–±–∞ ---
# –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –¥—Ä—É–∂–±–∏
    if text.startswith("–¥—Ä –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è"):
        words = text.split()
        if len(words) < 3:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –¥—Ä –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è @username")
            return
        
        proposer = username
        target_raw = words[-1].lstrip("@").lower()
        target_username = find_user(target_raw)
        
        if not target_username:
            await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{target_raw}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        if target_username == proposer:
            await update.message.reply_text("–ù–µ–º–æ–∂–ª–∏–≤–æ –¥—Ä—É–∂–∏—Ç–∏ –∑ —Å–∞–º–∏–º —Å–æ–±–æ—é!")
            return
        
        if target_username in friends.get(proposer, {}):
            await update.message.reply_text(f"@{proposer} —ñ @{target_username} –≤–∂–µ –¥—Ä—É–∑—ñ! ü´∂")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—å –ø—Ä–æ–ø–æ–Ω—É—é—á–æ–≥–æ
        if known_users.get(proposer, {}).get("gender") is None:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üü¶ –ß–æ–ª–æ–≤—ñ—á–∞", callback_data=f"set_gender|{proposer}|male"),
                InlineKeyboardButton("ü©∑ –ñ—ñ–Ω–æ—á–∞", callback_data=f"set_gender|{proposer}|female")
            ]])
            await update.message.reply_text(f"@{proposer}, —Å–ø–µ—Ä—à—É –æ–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å:", reply_markup=keyboard)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—å —Ü—ñ–ª—ñ (–ù–û–í–ò–ô –ë–õ–û–ö)
        if known_users.get(target_username, {}).get("gender") is None:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üü¶ –ß–æ–ª–æ–≤—ñ—á–∞", callback_data=f"set_gender_and_propose|{target_username}|male|{proposer}"),
                InlineKeyboardButton("ü©∑ –ñ—ñ–Ω–æ—á–∞", callback_data=f"set_gender_and_propose|{target_username}|female|{proposer}")
            ]])
            await update.message.reply_text(
                f"@{target_username}, —Å–ø–µ—Ä—à—É –æ–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å, —â–æ–± @{proposer} –º—ñ–≥ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Ç–æ–±—ñ –¥—Ä—É–∂–±—É:",
                reply_markup=keyboard
            )
            return
        
        # –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –≤–∫–∞–∑–∞–ª–∏ —Å—Ç–∞—Ç—å ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("–¢–∞–∫ ü´∂", callback_data=f"accept|{proposer}|{target_username}"),
            InlineKeyboardButton("–ù—ñ üôÉ", callback_data=f"reject|{proposer}|{target_username}")
        ]])
        await update.message.reply_text(
            f"@{target_username}, @{proposer} —Ö–æ—á–µ —Å—Ç–∞—Ç–∏ —Ç–≤–æ—ó–º –¥—Ä—É–≥–æ–º! –ü—Ä–∏–π–º–∞—î—à?",
            reply_markup=keyboard
        )
        return

    if text.startswith("–¥–∞—Ç–∏ –ª—è—â–∞"):
        await give_bream(update, context)
        return

    if text.startswith("–¥—Ä –æ–±—ñ–π–Ω—è—Ç–∏"):
        await hug(update, context)
        return

    if text.startswith("–ø–µ—Ä–µ—Å—Ç–∞—Ç–∏ –¥—Ä—É–∂–∏—Ç–∏"):
        words = text.split()
        if len(words) < 3:
            await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –¥—Ä—É–∑—ñ–≤ üòÖ")
            return
        raw_target = words[-1].lstrip("@").lower()
        target_username = find_user(raw_target)
        if not target_username:
            await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{raw_target}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        if target_username not in friends.get(username, {}):
            await update.message.reply_text(f"@{target_username} –Ω–µ —î –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º üòÖ")
            return
        await action_handler.remove_friend(update, context)

    # --- –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ –±–∞–ª–∞–Ω—Å–∞ ---
    if text == "–∑–ø":
        now = datetime.now(KIEV_TZ)
        last_time_str = user_data.get("last_salary")
        if last_time_str:
            last_time = parse_datetime(last_time_str)
            if last_time and now < last_time + timedelta(hours=4):
                remaining = (last_time + timedelta(hours=4)) - now
                await update.message.reply_text(
                    f"üí∞ –ó–∞—á–µ–∫–∞–π, –ø–æ–∫–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è –∫—É–ª–¥–∞—É–Ω: {format_duration(remaining)}"
                )
                return
        coins_earned = random.randint(1, 30)
        user_data["coins"] = user_data.get("coins", 0) + coins_earned
        user_data["last_salary"] = now.isoformat()
        save_known_users()
        await update.message.reply_text(
            f"üíµ @{username} –æ—Ç—Ä–∏–º–∞–≤(–ª–∞) {coins_earned} –º–æ–Ω–µ—Ç! –ó–∞—Ä–∞–∑ —É —Ç–µ–±–µ: {user_data['coins']} –º–æ–Ω–µ—Ç."
        )
        return

    if text == "–±–∞–ª–∞–Ω—Å":
        coins = user_data.get("coins", 0)
        await update.message.reply_text(f"üí∞ @{username}, —Ç–≤—ñ–π –±–∞–ª–∞–Ω—Å: {coins} –º–æ–Ω–µ—Ç.")
        return

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")
    if not data:
        return
    action = data[0]

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤
    if action == "unfriend_all":
        sender_username = data[1]
        for friend in list(friends.get(sender_username, {})):
            friends[friend].pop(sender_username, None)
        friends[sender_username] = {}
        save_friends()
        await query.edit_message_text("–í–∏ –±—ñ–ª—å—à–µ –Ω—ñ –∑ –∫–∏–º –Ω–µ –¥—Ä—É–∂–∏—Ç–µ üíî")
        return

    # –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–º—ñ–Ω–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    if action == "unfriend_no":
        await query.edit_message_text("–î—Ä—É–∂–±–∞ –∑–∞–ª–∏—à–∏–ª–∞—Å—è üòä")
        return

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥—Ä—É–≥–∞
    if action == "unfriend_yes":
        if len(data) < 3:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö")
            return
        sender_username = data[1]
        target_username = data[2]
        
        if sender_username in friends:
            friends[sender_username].pop(target_username, None)
        if target_username in friends:
            friends[target_username].pop(sender_username, None)
        save_friends()
        
        await query.edit_message_text(f"–í–∏ –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –¥—Ä—É–∂–∏—Ç–∏ –∑ @{target_username} üò¢")
        return

    # –û–±—Ä–æ–±–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—ñ (–∑–≤–∏—á–∞–π–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫)
    if action == "set_gender":
        usern, gender = data[1], data[2]
        known_users[usern]["gender"] = gender
        save_known_users()
        await query.edit_message_text(f"–°—Ç–∞—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —è–∫ '{gender}'. –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –¥—Ä—É–∂–±—É.")
        return

    # –ù–û–í–ò–ô –ë–õ–û–ö: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—ñ + –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –¥—Ä—É–∂–±–∏
    if action == "set_gender_and_propose":
        target_username = data[1]
        gender = data[2]
        proposer = data[3]
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—å
        known_users[target_username]["gender"] = gender
        save_known_users()
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –¥—Ä—É–∂–±–∏
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("–¢–∞–∫ ü´∂", callback_data=f"accept|{proposer}|{target_username}"),
            InlineKeyboardButton("–ù—ñ üôÉ", callback_data=f"reject|{proposer}|{target_username}")
        ]])
        
        await query.edit_message_text(
            f"–°—Ç–∞—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —è–∫ '{gender}'.\n\n"
            f"@{target_username}, @{proposer} —Ö–æ—á–µ —Å—Ç–∞—Ç–∏ —Ç–≤–æ—ó–º –¥—Ä—É–≥–æ–º! –ü—Ä–∏–π–º–∞—î—à?",
            reply_markup=keyboard
        )
        return

    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –¥—Ä—É–∂–±–∏
    if len(data) != 3:
        return

    action, proposer, proposee = data
    user = query.from_user
    user_username = user.username.lower() if user.username else None

    if user_username != proposee:
        await query.answer("–¢–∏ –Ω–µ –º–æ–∂–µ—à –ø—Ä–∏–π–º–∞—Ç–∏ —Ü—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.", show_alert=True)
        return

    if action == "accept":
        await add_friend(proposer, proposee, context, query.message.chat_id)
        await query.edit_message_text(f"ü´∂ –î—Ä—É–∂–±–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
    elif action == "reject":
        await query.edit_message_text(f"üôÉ @{proposee} –≤—ñ–¥–º–æ–≤–∏–≤—Å—è(–ª–∞—Å—å) –¥—Ä—É–∂–∏—Ç–∏ –∑ @{proposer}.")

async def friends_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(KIEV_TZ)
    lines = []
    shown_pairs = set()

    for user, friends_dict in friends.items():
        for friend, data in friends_dict.items():
            pair = tuple(sorted([user, friend]))
            if pair in shown_pairs:
                continue
            shown_pairs.add(pair)

            since_dt = parse_datetime(data.get("since"))
            duration = format_duration(now - since_dt) if since_dt else "–Ω–µ–≤—ñ–¥–æ–º–æ"
            xp = data.get("xp", 0)
            level, _, level_name = get_level_and_name(xp)
            # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É—Ä–æ–≤–Ω—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π
            if level_name == "–ó–Ω–∞–π–æ–º—ñ":
                emoji = "üå±"
            elif level_name == "–•–æ—Ä–æ—à—ñ –¥—Ä—É–∑—ñ":
                emoji = "üå∏"
            elif level_name == "–ë–ª–∏–∑—å–∫—ñ –¥—Ä—É–∑—ñ":
                emoji = "üíû"
            elif level_name == "–ö—Ä–∞—â—ñ –¥—Ä—É–∑—ñ":
                emoji = "üî•"
            elif level_name == "–î—É—à–µ–≤–Ω—ñ –¥—Ä—É–∑—ñ":
                emoji = "üåà"
            elif level_name == "–ù–µ—Ä–æ–∑–ª—É—á–Ω—ñ":
                emoji = "üíç"
            else:
                emoji = "‚≠ê"

            lines.append(
                f"{emoji} @{pair[0]} ü§ù @{pair[1]}\n"
                f" üìÖ {duration}\n"
                f" ‚ú® XP: {xp} | üß© –†—ñ–≤–µ–Ω—å: {level} ‚Äî ¬´{level_name}¬ª\n"
            )


    if lines:
        await update.message.reply_text("\n".join(lines))
    else:
        await update.message.reply_text("–î—Ä—É–∑—ñ–≤ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î.")


async def my_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username.lower() if user.username else None
    if not username:
        await update.message.reply_text("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î username.")
        return
    user_data = known_users.get(username, {})
    user_name = user_data.get("name") or user.first_name or f"@{user.username}"
    gender = user_data.get("gender")
    gender_text = "–ß–æ–ª–æ–≤—ñ—á–∏–π ‚ôÇ" if gender=="male" else "–ñ—ñ–Ω–æ—á–∏–π ‚ôÄ" if gender=="female" else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ ‚öß"
    text_lines = [f"üë§ [{user_name}](tg://user?id={user_data.get('id')})", f"‚ö• –°—Ç–∞—Ç—å: {gender_text}"]

    if username in friends and friends[username]:
        for friend_username, data in friends[username].items():
            friend_data = known_users.get(friend_username,{})
            friend_name = friend_data.get("name") or f"@{friend_username}"
            since_dt = parse_datetime(data.get("since"))
            duration = format_duration(datetime.now(KIEV_TZ) - since_dt) if since_dt else "–Ω–µ–≤—ñ–¥–æ–º–æ"
            friend_xp = data.get("xp",0)
            friend_level, _, friend_level_name = get_level_and_name(friend_xp)
            text_lines.append(
                f"ü´∂ –î—Ä—É–∂–∏—Ç—å –∑ {friend_name}\n"
                f"üìÖ –ó {since_dt.strftime('%d.%m.%Y %H:%M') if since_dt else '–Ω–µ–≤—ñ–¥–æ–º–æ'}\n"
                f"‚è≥ –†–∞–∑–æ–º –≤–∂–µ: {duration}\n"
                f"‚≠ê –†—ñ–≤–µ–Ω—å: {friend_level} ‚Äî ¬´{friend_level_name}¬ª (XP: {friend_xp})"
            )
    else:
        text_lines.append("ü´∂ –ü–æ–∫–∏ —â–æ –±–µ–∑ –¥—Ä—É–∑—ñ–≤")
    await update.message.reply_text("\n\n".join(text_lines), parse_mode="Markdown")

async def unfriend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username.lower() if user and user.username else None
    if not username:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î username.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–∑—å—è
    if username not in friends or not friends[username]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥—Ä—É–∑—ñ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("–¢–∞–∫, —Ä–æ–∑—ñ—Ä–≤–∞—Ç–∏ –≤—Å—ñ –¥—Ä—É–∂–±–∏ üíî", callback_data=f"unfriend_all|{username}"),
            InlineKeyboardButton("–ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏ –¥—Ä—É–∑—ñ–≤ üòä", callback_data="unfriend_no")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑—ñ—Ä–≤–∞—Ç–∏ –≤—Å—ñ –¥—Ä—É–∂–±–∏? üíî",
        reply_markup=reply_markup
    )

async def updates_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üîÑ <b>–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–æ—Ç–∞</b>\n\n"
        "üìÖ <b>–î–∞—Ç–∞:</b> 17.10.2025\n\n"
        "‚ú® <b>–©–æ –Ω–æ–≤–æ–≥–æ:</b>\n\n"
        "1Ô∏è‚É£ <b>–í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫—É</b> –∑ –∫–æ–º–∞–Ω–¥–æ—é '–ø–µ—Ä–µ—Å—Ç–∞—Ç–∏ –¥—Ä—É–∂–∏—Ç–∏ @username' ‚Äî —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!\n\n"
        "2Ô∏è‚É£ <b>–ü–æ–∫—Ä–∞—â–µ–Ω–æ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥—Ä—É–∂–±–∏:</b>\n"
        "   ‚Ä¢ –¢–µ–ø–µ—Ä —è–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø—Ä–æ–ø–æ–Ω—É—é—Ç—å –¥—Ä—É–∂–±—É, –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç—å ‚Äî –±–æ—Ç —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—å\n"
        "   ‚Ä¢ –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –¥—Ä—É–∂–±–∏ –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n\n"
        "3Ô∏è‚É£ <b>–î–æ–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /updates</b> ‚Äî —Ç–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è!\n\n"
        "üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏!"
    )
    await update.message.reply_text(text, parse_mode="HTML")

async def zp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_text(update, context)

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_text(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "ü§ñ <b>–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –¥—Ä—É–∂–±–∏:</b>\n\n"
        "üìú <b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
        "/friends ‚Äî –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤ —Ç–∞ —è–∫ –¥–æ–≤–≥–æ –¥—Ä—É–∂–∞—Ç—å\n"
        "/my ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–≤–æ—é –∫–∞—Ä—Ç–∫—É (—ñ–º'—è, —Å—Ç–∞—Ç—å, –¥—Ä—É–∑—ñ)\n"
        "/unfriend ‚Äî –†–æ–∑—ñ—Ä–≤–∞—Ç–∏ –≤—Å—ñ –¥—Ä—É–∂–±–∏\n"
        "/updates ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–æ—Ç–∞\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n\n"
        "üí¨ <b>–¢–µ–∫—Å—Ç–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "–¥—Ä –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è @username ‚Äî –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –¥—Ä—É–∂–±—É\n"
        "–¥—Ä –æ–±—ñ–π–Ω—è—Ç–∏ –≤—Å—ñ—Ö‚Äî –û–±—ñ–π–Ω—è—Ç–∏ —É—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤ –∞–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ @username)\n"
        "–¥—Ä –æ–±—ñ–π–Ω—è—Ç–∏ @username ‚Äî –û–±—ñ–π–Ω—è—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥—Ä—É–≥–∞\n"
        "–¥–∞—Ç–∏ –ª—è—â–∞ –≤—Å—ñ–º ‚Äî –î–∞—Ç–∏ –ª—è—â–∞ —É—Å—ñ–º –¥—Ä—É–∑—è–º –∞–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ—Ä–µ–∑ @username\n"
        "–¥–∞—Ç–∏ –ª—è—â–∞ @username ‚Äî –î–∞—Ç–∏ –ª—è—â–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥—Ä—É–≥—É\n"
        "–ø–µ—Ä–µ—Å—Ç–∞—Ç–∏ –¥—Ä—É–∂–∏—Ç–∏ @username ‚Äî –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –∑ –¥—Ä—É–∂–±–∏\n"
        "—Å—Ç–∞—Ç—å —á–æ–ª–æ–≤—ñ—á–∞ / —Å—Ç–∞—Ç—å –∂—ñ–Ω–æ—á–∞ ‚Äî –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–±–æ –ø–æ–º—ñ–Ω—è—Ç–∏ —Å—Ç–∞—Ç—å\n"
        "–∑–ø ‚Äî –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É (–º–æ–Ω–µ—Ç–∏)\n"
        "–±–∞–ª–∞–Ω—Å ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç\n"
        "üéÅ <b>–ü–æ–¥–∞—Ä—É–Ω–∫–∏:</b>\n"
        "–ø–æ–¥–∞—Ä–∏—Ç–∏ –±—ñ–ª—É —à–æ–∫–æ–ª–∞–¥–∫—É @username ‚Äî –ü–æ–¥–∞—Ä—É–≤–∞—Ç–∏ –¥—Ä—É–≥—É —à–æ–∫–æ–ª–∞–¥–∫—É (+5 XP –¥–ª—è –¥—Ä—É–∂–±–∏)"
    )
    await update.message.reply_text(text, parse_mode="HTML")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
app.add_handler(CommandHandler("friends", friends_list))
app.add_handler(CommandHandler("my", my_card))
app.add_handler(CommandHandler("unfriend", unfriend))
app.add_handler(CommandHandler("hug", hug))
app.add_handler(CommandHandler("give_bream", give_bream))
app.add_handler(CommandHandler("zp", zp))
app.add_handler(CommandHandler("balance", balance))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("updates", updates_command))
app.add_handler(CallbackQueryHandler(button_handler))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ ‚úÖ")
    app.run_polling()